#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—à–∏–±–æ–∫ ComfyUI - –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–æ –ª–æ–≥–∞–º
"""

import re
import sys
import json
from datetime import datetime
from collections import defaultdict, Counter
import argparse

def parse_timestamp(line):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç timestamp –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω [YYYY-MM-DD HH:MM:SS.mmm]
    match = re.search(r'\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})\]', line)
    if match:
        try:
            return datetime.strptime(match.group(1), '%Y-%m-%d %H:%M:%S.%f')
        except ValueError:
            pass
    return None

def analyze_log_file(log_path, show_details=False):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫"""
    
    try:
        with open(log_path, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_path}")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {log_path}: {e}")
        return
    
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞: {log_path}")
    print(f"üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
    
    if not lines:
        print("üìã –§–∞–π–ª –ª–æ–≥–∞ –ø—É—Å—Ç–æ–π")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    error_patterns = {
        'got_prompt': r'got prompt',
        'error_handling': r'Error handling request',
        'websocket_error': r'websocket.*error|WebSocket.*Error',
        'http_error': r'HTTP.*[Ee]rror|requests.*[Ee]rror',
        'traceback': r'Traceback|Exception:',
        'comfyui_error': r'ComfyUI.*[Ee]rror',
        'validation_error': r'validation.*failed|Workflow validation',
        'timeout': r'timeout|Timeout',
        'connection_error': r'connection.*error|Connection.*Error',
        'model_error': r'model.*not.*found|checkpoint.*error'
    }
    
    error_counts = Counter()
    error_details = defaultdict(list)
    timestamps = []
    
    for i, line in enumerate(lines):
        line = line.strip()
        if not line:
            continue
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp
        ts = parse_timestamp(line)
        if ts:
            timestamps.append(ts)
        
        # –ò—â–µ–º –æ—à–∏–±–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        for error_type, pattern in error_patterns.items():
            if re.search(pattern, line, re.IGNORECASE):
                error_counts[error_type] += 1
                if show_details:
                    error_details[error_type].append({
                        'line_num': i + 1,
                        'timestamp': ts.isoformat() if ts else 'unknown',
                        'content': line[:200] + '...' if len(line) > 200 else line
                    })
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫:")
    if error_counts:
        for error_type, count in error_counts.most_common():
            print(f"  ‚Ä¢ {error_type}: {count}")
    else:
        print("  ‚úÖ –û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    if timestamps:
        first_ts = min(timestamps)
        last_ts = max(timestamps)
        duration = last_ts - first_ts
        print(f"\n‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:")
        print(f"  ‚Ä¢ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {first_ts.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_ts.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"  ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    if show_details and error_details:
        print(f"\nüìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:")
        for error_type, details in error_details.items():
            print(f"\nüî∏ {error_type} ({len(details)} —Ä–∞–∑):")
            for detail in details[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                print(f"  –°—Ç—Ä–æ–∫–∞ {detail['line_num']} [{detail['timestamp']}]: {detail['content']}")
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ "Error handling request"
    recent_errors = []
    for i, line in enumerate(lines):
        if 'Error handling request' in line:
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –æ—à–∏–±–∫–∏
            start_idx = max(0, i - 5)
            end_idx = min(len(lines), i + 10)
            context = ''.join(lines[start_idx:end_idx])
            recent_errors.append({
                'line_num': i + 1,
                'context': context
            })
    
    if recent_errors:
        print(f"\nüö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ 'Error handling request' ({len(recent_errors)}):")
        for error in recent_errors[-2:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2
            print(f"\nüìç –°—Ç—Ä–æ–∫–∞ {error['line_num']}:")
            print("=" * 50)
            print(error['context'])
            print("=" * 50)

def main():
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—à–∏–±–æ–∫ ComfyUI')
    parser.add_argument('-f', '--follow', action='store_true', help='–°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')
    parser.add_argument('-e', '--errors', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏')
    parser.add_argument('-l', '--last', type=int, default=50, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫')
    parser.add_argument('-s', '--status', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å ComfyUI')
    parser.add_argument('-d', '--details', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫')
    parser.add_argument('--log-path', default='/workspace/ComfyUI/user/comfyui.log', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.status:
        import subprocess
        import socket
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ComfyUI...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        try:
            result = subprocess.run(['pgrep', '-f', 'main.py'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ ComfyUI –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω (PID: {result.stdout.strip()})")
            else:
                print("‚ùå ComfyUI –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('localhost', 8188))
            sock.close()
            if result == 0:
                print("‚úÖ –ü–æ—Ä—Ç 8188 –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print("‚ùå –ü–æ—Ä—Ç 8188 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
    if not args.follow:
        analyze_log_file(args.log_path, args.details)
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥
        alt_log = "/tmp/comfyui.log"
        if alt_log != args.log_path and open(alt_log, 'r').read().strip():
            analyze_log_file(alt_log, args.details)
    else:
        # –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        import subprocess
        
        if not args.errors:
            subprocess.run(['tail', '-f', args.log_path])
        else:
            cmd = f"tail -f {args.log_path} | grep -i -E '(error|exception|failed|traceback|critical)'"
            subprocess.run(cmd, shell=True)

if __name__ == "__main__":
    main()
